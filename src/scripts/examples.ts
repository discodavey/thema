/**
 * A script to generate example `*.html` files and `../examples/examples.ts`.
 *
 * Run using `npm run update:examples`.
 *
 * To add an example,
 *
 * 1. write a `function` with a camelCased name that begins with the
 *    type of the top level node e.g. `articleDrosophila`, `datatableTitanic` and creates
 *    a HTML file with the same name (e.g. `articleDrosophila.html`) in `../examples/`
 *
 * 2. add the function to the `EXAMPLES` array.
 *
 * Examples are best generated by Encoda, since Thema targets the HTML that
 * it generates. Having said that, you _could_ generate examples using other tools 🛠️,
 * or even write HTML by hand ✍️.
 *
 * In some cases, examples are also converted to YAML (e.g. `articleDrosophila.yaml`)
 * by Encoda to be able to more easily see which nodes are being decoded from the source
 * format e.g. JATS, but not being encoded to HTML (ie. missing from example pages).
 */

import { convert } from '@stencila/encoda'
import fs from 'fs'
import path from 'path'

const EXAMPLES = [
  articleReadme,
  articleKitchenSink,
  articleDrosophila,
  articleReplication,
  articleAntibodies,
]

/**
 * Given a filename, return its path within the examples folder.
 */
const ex = (filename: string): string =>
  path.join(__dirname, '..', 'examples', filename)

/**
 * Call Encoda `convert` with options required for the HTML used by this repo.
 */
const build = (
  input: string,
  outputs: string | string[]
): Promise<string | undefined> =>
  convert(input, outputs, { encodeOptions: { isStandalone: false } })

/**
 * The README of this repo to be used as the default page of the demo
 * at https://stencila.github.io/thema.
 */
function articleReadme(): Promise<string | undefined> {
  return build(
    path.join(__dirname, '..', '..', 'README.md'),
    ex('articleReadme.html')
  )
}

/**
 * A kitchen sink article intended to have at
 * least one of every node type.
 */
function articleKitchenSink(): Promise<string | undefined> {
  return build(ex('articleKitchenSink.json'), ex('articleKitchenSink.html'))
}

/**
 * An eLife article on fruit fly.
 */
function articleDrosophila(): Promise<string | undefined> {
  return build(
    'https://elifesciences.org/articles/49574v2',
    ex('articleDrosophila.html')
  )
}

/**
 * An eLife article on a replication study
 */
function articleReplication(): Promise<string | undefined> {
  return build(
    'https://elifesciences.org/articles/30274v2',
    ex('articleReplication.html')
  )
}

/**
 * A PLoS article.
 */
function articleAntibodies(): Promise<string | undefined> {
  return build(
    'https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007207',
    ex('articleAntibodies.html')
  )
}

// Run each function
Promise.all(EXAMPLES.map((example) => example())).catch((err) =>
  console.error(err)
)

// Generate `../examples/examples.ts`
fs.writeFileSync(
  ex('examples.ts'),
  `
// Generated by generate/${path.basename(__filename)}. Do not edit.

/**
 * Map of example names
 */
export const examples: {
  ${EXAMPLES.map((example) => `${example.name}: string`).join('\n  ')}
} = {
  ${EXAMPLES.map((example) => `${example.name}: '${example.name}'`).join(
    ',\n  '
  )}
}
`.trimLeft()
)
